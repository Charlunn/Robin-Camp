name: CI

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: ${{ github.sha }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Load registry configuration
        shell: bash
        run: |
          echo "IMAGE_NAME=${{ toLower(vars.IMAGE_NAME || 'cinema') }}" >> "$GITHUB_ENV"
          echo "REGISTRY_USERNAME=${{ toLower(vars.REGISTRY_USERNAME || github.repository_owner) }}" >> "$GITHUB_ENV"

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true

      - name: Go vet
        run: go vet ./...
        working-directory: cinema

      - name: Run unit tests
        run: go test ./...
        working-directory: cinema

      - name: Build Docker image
        run: docker build -t "$IMAGE_NAME:$IMAGE_TAG" -f cinema/Dockerfile cinema

      - name: Save Docker image artifact
        shell: bash
        run: |
          docker save "$IMAGE_NAME:$IMAGE_TAG" | gzip > image.tar.gz

      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: cinema-image
          path: image.tar.gz
          retention-days: 1

  deploy:
    runs-on: ubuntu-latest
    needs: build
    env:
      IMAGE_TAG: ${{ github.sha }}
      DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Load registry configuration
        shell: bash
        run: |
          echo "IMAGE_NAME=${{ toLower(vars.IMAGE_NAME || 'cinema') }}" >> "$GITHUB_ENV"
          echo "REGISTRY_USERNAME=${{ toLower(vars.REGISTRY_USERNAME || github.repository_owner) }}" >> "$GITHUB_ENV"

      - name: Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: cinema-image
          path: artifacts

      - name: Load Docker image
        shell: bash
        run: |
          gunzip -c artifacts/image.tar.gz | docker load

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push image to GitHub Container Registry
        shell: bash
        run: |
          set -euo pipefail
          IMAGE_REF="ghcr.io/${REGISTRY_USERNAME}/$IMAGE_NAME:${IMAGE_TAG}"
          docker tag "$IMAGE_NAME:${IMAGE_TAG}" "$IMAGE_REF"
          docker push "$IMAGE_REF"
          echo "IMAGE_REF=$IMAGE_REF" >> "$GITHUB_ENV"

      - name: Prepare deployment workspace
        shell: bash
        run: |
          set -euo pipefail
          DEPLOY_DIR="${DEPLOY_PATH:-$GITHUB_WORKSPACE/deploy}"
          mkdir -p "$DEPLOY_DIR"
          rsync -a --delete --exclude '.git' --exclude '.github' --exclude '.env' "$GITHUB_WORKSPACE/cinema/" "$DEPLOY_DIR/"
          echo "DEPLOY_DIR=$DEPLOY_DIR" >> "$GITHUB_ENV"

      - name: Ensure environment file exists
        shell: bash
        run: |
          set -euo pipefail
          DEPLOY_DIR="${DEPLOY_DIR:-${DEPLOY_PATH:-$GITHUB_WORKSPACE/deploy}}"
          if [ ! -f "$DEPLOY_DIR/.env" ]; then
            echo "A .env file with deployment secrets must exist in $DEPLOY_DIR" >&2
            exit 1
          fi

      - name: Update deployment image reference
        shell: bash
        run: |
          set -euo pipefail
          DEPLOY_DIR="${DEPLOY_DIR:-${DEPLOY_PATH:-$GITHUB_WORKSPACE/deploy}}"
          if grep -q '^APP_IMAGE=' "$DEPLOY_DIR/.env"; then
            sed -i "s|^APP_IMAGE=.*|APP_IMAGE=${IMAGE_REF}|" "$DEPLOY_DIR/.env"
          else
            echo "APP_IMAGE=${IMAGE_REF}" >> "$DEPLOY_DIR/.env"
          fi

      - name: Deploy application
        shell: bash
        run: |
          set -euo pipefail
          DEPLOY_DIR="${DEPLOY_DIR:-${DEPLOY_PATH:-$GITHUB_WORKSPACE/deploy}}"
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "$REGISTRY_USERNAME" --password-stdin
          docker pull "$IMAGE_REF"
          cd "$DEPLOY_DIR"
          docker compose pull
          docker compose up -d --remove-orphans
          docker image prune -f

      - name: Install E2E test dependencies
        shell: bash
        run: |
          set -euo pipefail
          if ! command -v jq >/dev/null 2>&1; then
            if command -v sudo >/dev/null 2>&1; then
              sudo apt-get update
              sudo apt-get install -y jq
            else
              apt-get update
              apt-get install -y jq
            fi
          fi

      - name: Run E2E tests
        shell: bash
        run: |
          set -euo pipefail
          DEPLOY_DIR="${DEPLOY_DIR:-${DEPLOY_PATH:-$GITHUB_WORKSPACE/deploy}}"
          cd "$DEPLOY_DIR"
          chmod +x ./e2e-test.sh
          ./e2e-test.sh

