name: CI

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

env:
  IMAGE_NAME: cinema-app
  REGISTRY_USERNAME: charlunn

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: ${{ github.sha }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true

      - name: Go vet
        run: go vet ./...
        working-directory: cinema

      - name: Run unit tests
        run: go test ./...
        working-directory: cinema

      - name: Build Docker image
        run: docker build -t "$IMAGE_NAME:$IMAGE_TAG" -f cinema/Dockerfile cinema

      - name: Save Docker image artifact
        shell: bash
        run: |
          docker save "$IMAGE_NAME:$IMAGE_TAG" | gzip > image.tar.gz

      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: cinema-image
          path: image.tar.gz
          retention-days: 1

  deploy:
    runs-on: ubuntu-latest
    needs: build
    env:
      IMAGE_TAG: ${{ github.sha }}
      DEPLOY_PORT: ${{ secrets.DEPLOY_PORT || '22' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: cinema-image
          path: artifacts

      - name: Load Docker image
        shell: bash
        run: |
          gunzip -c artifacts/image.tar.gz | docker load

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push image to GitHub Container Registry
        shell: bash
        run: |
          set -euo pipefail
          IMAGE_REF="ghcr.io/${REGISTRY_USERNAME}/$IMAGE_NAME:${IMAGE_TAG}"
          docker tag "$IMAGE_NAME:${IMAGE_TAG}" "$IMAGE_REF"
          docker push "$IMAGE_REF"
          echo "IMAGE_REF=$IMAGE_REF" >> "$GITHUB_ENV"

      - name: Create deployment bundle
        shell: bash
        run: |
          tar --exclude='.env' -czf cinema-deploy.tar.gz -C cinema .

      - name: Upload deployment bundle
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: ${{ env.DEPLOY_PORT }}
          source: cinema-deploy.tar.gz
          target: ${{ secrets.DEPLOY_PATH }}

      - name: Deploy on remote host
        uses: appleboy/ssh-action@v0.1.7
        env:
          IMAGE_REF: ${{ env.IMAGE_REF }}
          REGISTRY_USERNAME: ${{ env.REGISTRY_USERNAME }}
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: ${{ env.DEPLOY_PORT }}
          script: |
            set -euo pipefail
            DEPLOY_DIR="${{ secrets.DEPLOY_PATH }}"
            mkdir -p "$DEPLOY_DIR"
            cd "$DEPLOY_DIR"
            tar -xzf cinema-deploy.tar.gz
            rm -f cinema-deploy.tar.gz
            if [ -n "$IMAGE_REF" ]; then
              if [ -f .env ]; then
                sed -i "s|^APP_IMAGE=.*|APP_IMAGE=$IMAGE_REF|" .env
              else
                echo "APP_IMAGE=$IMAGE_REF" > .env
              fi
            fi
            echo "Logging in to registry"
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "$REGISTRY_USERNAME" --password-stdin
            docker pull "$IMAGE_REF"
            docker compose pull
            docker compose up -d --remove-orphans
            docker image prune -f

